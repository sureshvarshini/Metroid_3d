#version 330

in vec3 vertex_position;
in vec2 vertex_uv;
in vec3 vertex_normal;
in vec3 vertex_color;

out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

out vec3 LightIntensity;
out vec3 fragmentColor;

vec4 LightPosition = vec4 (10.0, 10.0, 4.0, 1.0); // Light position in world coords.
vec3 Kd = vec3 (0.8, 0.0, 0.2); // green diffuse surface reflectance
vec3 Ld = vec3 (1.0, 1.0, 1.0); // Light source intensity

uniform mat4 view;
uniform mat4 projection;
uniform mat4 model;
uniform mat4 MVP;
uniform vec3 LightPosition_worldspace;

void main(){

  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);

  Position_worldspace = (model * vec4(vertex_position,1)).xyz;

  vec3 vertexPosition_cameraspace = ( view * model * vec4(vertex_position,1)).xyz;
  EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
  
  vec3 LightPosition_cameraspace = ( view * vec4(LightPosition_worldspace,1)).xyz;
  LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
  
  Normal_cameraspace = ( view * model * vec4(vertex_normal,0)).xyz; 

  UV = vertex_uv;

  vec3 tnorm = normalize( NormalMatrix * vertex_normal);

  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);

  vec3 s = normalize(vec3(LightPosition - eyeCoords));
  
  LightIntensity = Ld * Kd * max( dot( s, tnorm ), 0.0 );
  
  gl_Position = projection * view * model * vec4(vertex_position,1.0);
}


  