#version 330 core

// Input from Vertex Shader
in vec2 uv_vertex;
in vec3 surfaceNormals;
in vec3 fragmentPosition;

in vec3 LightIntensity;

uniform vec3 cameraPos;
uniform vec3 lightPos;
uniform vec2 scr_center;

// Output data
out vec3 color;

void main(){
	//flashlight
	float intensity = 0;				
	float innerRadius = 40;
	float outerRadius = innerRadius + 40;
	float additionalIntensity = 1.0;
	float distance = length(cameraPos - fragmentPosition);
	float constant = 1.0;
	float linear = 0.09;
	float quadratic = 0.032;
	float pointX = gl_FragCoord.x - scr_center.x;
	float pointY = gl_FragCoord.y - scr_center.y;
	float result = pow(pointX, 2) + pow(pointY, 2) - pow(innerRadius, 2);
	vec3 lightPosition = lightPos;

	vec3 lightColor = normalize(vec3(255.0, 230.0, 180.0));

	//Normal
	vec3 norm = normalize(surfaceNormals);
	vec3 lightDirection = normalize(lightPosition - fragmentPosition);

	//Iintensity of diffuse lighting to the fragment
	float diffuseFactor = max(dot(norm, lightDirection), 0.0);
	vec3 diffuseLighting = diffuseFactor * lightColor;

	//Specular lighting
	vec3 viewDirection = normalize(cameraPos - fragmentPosition);
	vec3 reflectDirection = reflect(-lightDirection, norm);

	//Intensity of the spectular lighting
	float specularIntensity = 0.5;
	float specularFactor = pow(max(dot(viewDirection, reflectDirection), 0.0), 64);
	vec3 specularLighting = specularIntensity * specularFactor * lightColor;

	//Ambient lighting 
	float ambientIntensity = 0.3;

	//Apply intensity
	vec3 ambient = ambientIntensity * lightColor;

	if (result < 0) {
		float attenuation = 1 / (constant + (linear * distance) + (quadratic * pow(distance, 2)));
		intensity = additionalIntensity*attenuation;
	} else {
		
		if (result + (innerRadius * innerRadius) - (outerRadius * outerRadius) < 0) {
			float radDis = sqrt((pointX*pointX) + (pointY*pointY));
			float normVal = (outerRadius - radDis) / (outerRadius - innerRadius);
			
			float attenuation = 1 / (constant + (linear * distance) + (quadratic * pow(distance, 2)));
			intensity = additionalIntensity*attenuation*normVal;
		}	
	}

	color = LightIntensity + ambient + diffuseLighting + intensity;
}
